{"version":3,"sources":["index.js"],"names":["Square","props","className","winningSquares","includes","id","onClick","value","Board","renderBoard","renderedBoard","counter","i","children","j","push","renderSquare","rowNumber","key","this","squares","React","Component","Game","state","history","Array","fill","positions","stepNumber","xIsNext","active","order","slice","current","length","calculateWinner","setState","concat","step","myValue","status","winner","moves","map","move","desc","location","jumpTo","sort","a","b","moveOrder","handleClick","changeOrder","lines","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d298d7ac.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n  // The Square\n\n  function Square(props) {\n        return (         \n          // new rather than just square for className\n          <button className={`${props.winningSquares.includes(props.id)? 'winningSquare square': 'square'}`} onClick={props.onClick}>\n            {props.value} \n          </button>         \n        );\n    }\n\n  // The Board\n  \n  class Board extends React.Component {\n    renderSquare(i, j) {\n      return (\n        <Square \n            value={this.props.squares[i]} \n            onClick={() => this.props.onClick(i, j)}\n            key = {i}\n            // new\n            id = {i}\n            winningSquares = {this.props.winningSquares}\n        />\n        );\n    }\n\n    // render board using loops and template literals\n\n    renderBoard = () => {\n      let renderedBoard = []\n      let counter = 0\n      for(let i = 1; i <= 3; i++){\n        let children = []\n        for(let j = 1; j <= 3; j++){\n          children.push(this.renderSquare(counter, `(${i}, ${j})`))\n          counter++;\n        }     \n        let rowNumber = counter/3;\n        renderedBoard.push(<div key = {rowNumber} className=\"board-row\">{children}</div>)\n      }\n      return renderedBoard;\n    }\n\n    render(){\n      return(\n        <div>\n          {this.renderBoard()}\n        </div>\n      );\n    }\n  \n    // render() {\n    //   return (\n    //     <div>\n    //       <div className=\"board-row\">\n    //         {this.renderSquare(0, \"(1, 1)\")}\n    //         {this.renderSquare(1, \"(2, 1)\")}\n    //         {this.renderSquare(2, \"(3, 1)\")}\n    //       </div>\n    //       <div className=\"board-row\">\n    //         {this.renderSquare(3, \"(1, 2)\")}\n    //         {this.renderSquare(4, \"(2, 2)\")}\n    //         {this.renderSquare(5, \"(3, 2)\")}\n    //       </div>\n    //       <div className=\"board-row\">\n    //         {this.renderSquare(6, \"(1, 3)\")}\n    //         {this.renderSquare(7, \"(2, 3)\")}\n    //         {this.renderSquare(8, \"(3, 3)\")}\n    //       </div>\n    //     </div>\n    //   );\n    // }\n  }\n\n  // The Game\n  \n  class Game extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        history: [{\n          squares: Array(9).fill(null),\n          positions: []\n        }],\n        stepNumber: 0,\n        xIsNext: true,\n        active: 0,\n        order: true,\n        // new\n        winningSquares: [],\n      }\n    }\n\n    handleClick(i, j) {\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\n      // throw away \"future\" if we \"go back in time\" and make changes. Removes all history entries beyond current entry\n      const current = history[history.length - 1];\n\n      const positions = current.positions.slice();\n\n      const squares = current.squares.slice();\n      if (calculateWinner(squares) || squares[i]){\n          return;\n      }\n\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\n      this.setState({ \n          history: history.concat([{\n            squares: squares,\n            positions: positions.concat(j)\n          }]),\n          stepNumber: history.length,\n          xIsNext: !this.state.xIsNext,\n          active: history.length,\n          // new\n          winningSquares: calculateWinner(squares) ? calculateWinner(squares): []\n      });\n    }\n\n    // add active class to this function\n    jumpTo(step) {    \n      const myValue = calculateWinner(this.state.history[step].squares);\n      this.setState({\n        stepNumber: step,\n        xIsNext: (step % 2) === 0,\n        active: step,\n        winningSquares: step === this.state.history.length - 1 && myValue? myValue : []\n      })\n    }\n\n    changeOrder(){\n      this.setState({order: !this.state.order})\n    }\n    \n    render() {  \n      const history = this.state.history;\n      const current = history[this.state.stepNumber];\n      const winner = calculateWinner(current.squares);\n      const order = this.state.order;\n\n      // step is current value while move is index\n      // Normally, you would need to use 'step' for useful processing. \n      // However, in this specific case, only the index info 'move' \n      // is used to label the starting play differently and there \n      // is no use of 'step'.\n      // HOWEVER there can be no index without an entry or 'step' first\n\n      const moves = history.map((step, move) => {\n        const desc = move ? \n          'Go to move #' + move :\n          'Go to game start';\n        const location = history[move].positions // go to relevant history array and retrive positions\n        // alt : const location = history[move].positions[history[move].positions.length - 1]\n        // history object being recreated each move? 1 for 1, 2 for 2, 3 for 3...\n        return (\n          <li key={move}>\n            <button className={`${this.state.active === move ? 'active': ''}`} onClick={() => this.jumpTo(move)}>{desc} {location[location.length - 1]}</button> \n          </li>\n        )\n      });\n      \n      // sort according to state\n      if(order){\n        moves.sort((a, b) => b.key-a.key);\n      } else {\n        moves.sort((a, b) => a.key-b.key);\n      }\n\n      let status;\n      if (winner) {\n        // new rather than winner\n        status = `Winner: ${current.squares[winner[0]]}`;    \n      } else if(this.state.history.length === 10 && this.state.stepNumber === 9) {\n        status = \"Draw!\";\n      } else {\n        status = 'Next Player: ' + (this.state.xIsNext ? 'X' : 'O');\n      }\n\n      let moveOrder = 'Toggle Move Order ' + (this.state.order ? 'Asc.' : 'Desc.');\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board \n              squares={current.squares}\n              onClick = {(i, j) => this.handleClick(i, j)}\n              // new\n              winningSquares = {this.state.winningSquares}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div>{status}</div>\n            <ol>\n              <button onClick={() => this.changeOrder()} className=\"toggle\">{moveOrder}</button>\n              {moves}\n            </ol>\n          </div>        \n        </div>        \n      );\n    }\n  }\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n\n  // Helper function\n\n  function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        // new rather than squares[a]\n        return [a, b, c];\n      }       \n    }\n    return null;\n  }"],"sourceRoot":""}